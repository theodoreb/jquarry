"use strict";

var fs = require('fs');
var debug = require('debug')('parse');
var esprima = require('esprima');
var glob = require('glob');
var browser = require('mock-browser');
var vm = require('vm');
var _ = require('underscore');
var depsOrder = require('./depsOrder');


var jqueryFolder = './node_modules/jquery/src/';
var jQueryMethods = [];
var globOpts = {
  cwd: jqueryFolder,
  ignore: [
    'intro.js',
    '**/var/*',
    'outro.js',
    'jquery.js',
    'selector*'
  ]
};
var varOpts = {
  cwd: jqueryFolder,
  ignore: [
    '**/nonce.js'
  ]
};

var globalSandbox = {
  window: {
    document: {},
    location: {
      href: 'mock.html'
    }
  },
  nonce: +(new Date()),
  arr: [],
  class2type: {},
  concat: [].concat,
  hasOwn: {}.hasOwnProperty,
  indexOf: [].indexOf,
  pnum: (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source,
  push: [].push,
  rnotwhite: (/\S+/g),
  slice: [].slice,
  strundefined: typeof undefined,
  support: {},
  toString: {}.toString,
  jQuery: {fn: {}}
};
var excludeList = [
  'fn', 'length', 'push', 'sort', 'map'
];


/**
 * Strip all definitions generated by requirejs
 * Convert "var" modules to var declarations
 * "var module" means the module only contains a return
 * statement that should be converted to a var declaration
 * This is indicated by including the file in any "var" folder
 * @param {String} name
 * @param {String} path
 * @param {String} contents The contents to be written (including their AMD wrappers)
 */
function convert(name, path, contents) {
  var rdefineEnd = /\}\);[^}\w]*$/;
  // Convert var modules
  if (/.\/var\//.test(path)) {
    contents = contents
      .replace(/define\([\w\W]*?return/, "var " + (/var\/([\w-]+)/.exec(name)[1]) + " =")
      .replace(rdefineEnd, "");

    // Sizzle treatment
  }
  else if (/^sizzle$/.test(name)) {
    contents = "var Sizzle =\n" + contents
      // Remove EXPOSE lines from Sizzle
      .replace(/\/\/\s*EXPOSE[\w\W]*\/\/\s*EXPOSE/, "return Sizzle;");

  }
  else {

    contents = contents
      .replace(/\s*return\s+[^\}]+(\}\);[^\w\}]*)$/, "$1")
      // Multiple exports
      .replace(/\s*exports\.\w+\s*=\s*\w+;/g, "");

    // Remove define wrappers, closure ends, and empty declarations
    contents = contents
      .replace(/define\([^{]*?{/, "")
      .replace(rdefineEnd, "");

    // Remove anything wrapped with
    // /* ExcludeStart */ /* ExcludeEnd */
    // or a single line directly after a // BuildExclude comment
    contents = contents
      .replace(/\/\*\s*ExcludeStart\s*\*\/[\w\W]*?\/\*\s*ExcludeEnd\s*\*\//ig, "")
      .replace(/\/\/\s*BuildExclude\n\r?[\w\W]*?\n\r?/ig, "");

    // Remove empty definitions
    contents = contents
      .replace(/define\(\[[^\]]*\]\)[\W\n]+$/, "");
  }
  return contents;
}



function processjQueryFile(filename) {
  var module = filename.replace('.js', '');
  var content = fs.readFileSync(jqueryFolder + filename);

  var gut = convert(module, filename, String(content));

}

function processjQuerySource(er, files) {
  files.forEach(processjQueryFile);
}

function getMethods(module, file, methods, globals) {
  var jQuery = _.keys(globals.jQuery);
  var jQueryfn = _.keys(globals.jQuery.fn);

  var script = convert(module, file, String(fs.readFileSync(jqueryFolder + file)));
  vm.createScript(script, file).runInNewContext(globals, file);

  _.without(_.keys(globals.jQuery), jQuery).forEach(function (method) {
    methods.push({module: module, object: 'jQuery', method: method});
  });

  _.without(_.keys(globals.jQuery.fn), jQueryfn).forEach(function (method) {
    methods.push({module: module, object: 'jQuery.fn', method: method});
  });

  debug(_.pluck(methods, 'method'));
}

getMethods('core', 'core.js', jQueryMethods, globalSandbox);



//glob("**/*.js", globOpts, processjQuerySource);


/*
 glob('/var/*.js', varOpts, function (er, files) {
 return;
 "use strict";
 console.log(files);
 var vars = '';
 files.forEach(function (filename) {
 var module = filename.replace('.js', '');
 var content = String(fs.readFileSync(jqueryFolder + filename));
 vars += "\n" + convert(module, filename, content);
 });
 console.log(vars);
 vm.createScript(vars, 'vars.js').runInNewContext(globalSandbox, 'vars.js');
 console.log(globalSandbox);
 });
 */
